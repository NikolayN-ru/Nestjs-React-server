{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getLogin = createAsyncThunk('get/login', // payloadCreator\nasync (query, thunkApi) => {\n  console.log(query.email, query.password, 'queryquery');\n  console.log(JSON.stringify({\n    data: {\n      \"user\": {\n        \"email\": \"@gmail.com\",\n        \"password\": \"simple commentwww 2\"\n      }\n    }\n  })); // const posts = await api.get<Array<PostItem>>('/posts', {\n\n  const login = await api.post('/users/login', JSON.stringify({\n    body: {\n      \"user\": {\n        \"email\": \"@gmail.com\",\n        \"password\": \"simple commentwww 2\"\n      }\n    }\n  }));\n\n  if (login.status >= 400) {\n    return thunkApi.rejectWithValue({\n      message: 'Не удалось получить пользователя'\n    });\n  }\n\n  console.log(login.data, 'login-data');\n  return login.data;\n});","map":{"version":3,"names":["createAsyncThunk","api","getLogin","query","thunkApi","console","log","email","password","JSON","stringify","data","login","post","body","status","rejectWithValue","message"],"sources":["/Users/nn/Desktop/try/LB1/frontend/src/redux/thunks/login.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n\n\nexport interface ILogin {\n    id: number,\n    username: string,\n    email: string;\n    bio: string;\n    image: string;\n    token: string;\n}\n\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getLogin = createAsyncThunk<any, any, any>(\n    'get/login',\n    // payloadCreator\n    async (query, thunkApi) => {\n        console.log(query.email, query.password, 'queryquery')\n        console.log(JSON.stringify({\n            data: {\n                \"user\": {\n                    \"email\": \"@gmail.com\",\n                    \"password\": \"simple commentwww 2\"\n                }\n            },\n        }))\n        // const posts = await api.get<Array<PostItem>>('/posts', {\n        const login = await api.post<any>('/users/login', \n        JSON.stringify({\n            body: {\n                \"user\": {\n                    \"email\": \"@gmail.com\",\n                    \"password\": \"simple commentwww 2\"\n                }\n            },\n        }))\n\n        if (login.status >= 400) {\n            return thunkApi.rejectWithValue({\n                message: 'Не удалось получить пользователя'\n            })\n        }\n        console.log(login.data, 'login-data')\n\n        return login.data;\n    }\n)\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,GAAT,QAAoB,eAApB;AAYA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CACpC,WADoC,EAEpC;AACA,OAAOG,KAAP,EAAcC,QAAd,KAA2B;EACvBC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,KAAlB,EAAyBJ,KAAK,CAACK,QAA/B,EAAyC,YAAzC;EACAH,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACC,SAAL,CAAe;IACvBC,IAAI,EAAE;MACF,QAAQ;QACJ,SAAS,YADL;QAEJ,YAAY;MAFR;IADN;EADiB,CAAf,CAAZ,EAFuB,CAUvB;;EACA,MAAMC,KAAK,GAAG,MAAMX,GAAG,CAACY,IAAJ,CAAc,cAAd,EACpBJ,IAAI,CAACC,SAAL,CAAe;IACXI,IAAI,EAAE;MACF,QAAQ;QACJ,SAAS,YADL;QAEJ,YAAY;MAFR;IADN;EADK,CAAf,CADoB,CAApB;;EAUA,IAAIF,KAAK,CAACG,MAAN,IAAgB,GAApB,EAAyB;IACrB,OAAOX,QAAQ,CAACY,eAAT,CAAyB;MAC5BC,OAAO,EAAE;IADmB,CAAzB,CAAP;EAGH;;EACDZ,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACD,IAAlB,EAAwB,YAAxB;EAEA,OAAOC,KAAK,CAACD,IAAb;AACH,CAhCmC,CAAjC"},"metadata":{},"sourceType":"module"}