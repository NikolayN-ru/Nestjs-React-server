{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getArticles = createAsyncThunk('get/articles', //payloadCreator\nasync (_, thunkApi) => {\n  // if(true){\n  // \treturn ['']\n  // }\n  const posts = await api.get('/posts', {\n    data: {},\n    headers: {}\n  });\n\n  if (posts.status >= 400) {\n    return thunkApi.rejectWithValue({\n      message: 'Не удалось подключиться к серверу'\n    });\n  } // return thunkApi.rejectWithValue({\n  // message: ''\n  // })\n\n\n  return posts.data;\n});","map":{"version":3,"names":["createAsyncThunk","api","getArticles","_","thunkApi","posts","get","data","headers","status","rejectWithValue","message"],"sources":["/Users/nn/Desktop/try/LB1/frontend/src/redux/thunks/articles.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n\n\nexport interface PostItem {\n    userId: number,\n    id: number,\n    title: string,\n    body: string\n}\n\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getArticles = createAsyncThunk<Array<PostItem>, void, { rejectValue: { message: string } }>(\n    'get/articles',\n    //payloadCreator\n    async (_, thunkApi) => {\n\n        // if(true){\n        // \treturn ['']\n        // }\n\n        const posts = await api.get<Array<PostItem>>('/posts', {\n            data: {\n\n            },\n            headers: {\n\n            }\n        })\n\n\n        if (posts.status >= 400) {\n            return thunkApi.rejectWithValue({\n                message: 'Не удалось подключиться к серверу'\n            })\n        }\n\n        // return thunkApi.rejectWithValue({\n        // message: ''\n        // })\n\n        return posts.data\n    }\n)"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,GAAT,QAAoB,eAApB;AAUA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACvC,cADuC,EAEvC;AACA,OAAOG,CAAP,EAAUC,QAAV,KAAuB;EAEnB;EACA;EACA;EAEA,MAAMC,KAAK,GAAG,MAAMJ,GAAG,CAACK,GAAJ,CAAyB,QAAzB,EAAmC;IACnDC,IAAI,EAAE,EAD6C;IAInDC,OAAO,EAAE;EAJ0C,CAAnC,CAApB;;EAUA,IAAIH,KAAK,CAACI,MAAN,IAAgB,GAApB,EAAyB;IACrB,OAAOL,QAAQ,CAACM,eAAT,CAAyB;MAC5BC,OAAO,EAAE;IADmB,CAAzB,CAAP;EAGH,CApBkB,CAsBnB;EACA;EACA;;;EAEA,OAAON,KAAK,CAACE,IAAb;AACH,CA9BsC,CAApC"},"metadata":{},"sourceType":"module"}