{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getLogin = createAsyncThunk('get/login', // payloadCreator\nasync (query, thunkApi) => {\n  // console.log(query.email, query.password, 'queryquery')\n  // const posts = await api.get<Array<PostItem>>('/posts', {\n  const login = await api.post('/users/login', {\n    \"user\": {\n      \"email\": \"napadaylo2@gmail.com\",\n      \"password\": \"simple commentwww 2\"\n    } // headers: {\n    //     'Content-Type': 'application/json',\n    // }\n\n  }, {\n    headers: {\n      \"Authorization\": \"Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6OCwidXNlcm5hbWUiOiJQZXR5YTIiLCJlbWFpbCI6Im5hcGFkYXlsbzJAZ21haWwuY29tIiwiaWF0IjoxNjYxMzM2OTI3fQ.aThUXR0_aVoeAVQbnCEfN6T5s5eoDrEIBIfNxcidqzg\"\n    }\n  });\n\n  if (login.status >= 400) {\n    return thunkApi.rejectWithValue({\n      message: 'Не удалось получить пользователя'\n    });\n  } // console.log(login.data, 'login-data')\n\n\n  return login.data;\n});","map":{"version":3,"names":["createAsyncThunk","api","getLogin","query","thunkApi","login","post","headers","status","rejectWithValue","message","data"],"sources":["/app/src/redux/thunks/login.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { api } from \"../../api/api\";\n\n\nexport interface ILogin {\n    id: number,\n    username: string,\n    email: string;\n    bio: string;\n    image: string;\n    token: string;\n}\n\n//Generic CreateAsyncThunk\n//1 параметр - возвращаемое значение в случае fulfilled\n//2 параметр - аргументы payloadCreator, которые падают в _ (первый аргумент payloadCreator)\n//3 параметр - типизация thunkApi\nexport const getLogin = createAsyncThunk<any, any, any>(\n    'get/login',\n    // payloadCreator\n    async (query, thunkApi) => {\n        // console.log(query.email, query.password, 'queryquery')\n        // const posts = await api.get<Array<PostItem>>('/posts', {\n        const login = await api.post<any>('/users/login',\n            {\n                \"user\": {\n                    \"email\": \"napadaylo2@gmail.com\",\n                    \"password\": \"simple commentwww 2\"\n                },\n                // headers: {\n                //     'Content-Type': 'application/json',\n                // }\n            },\n            { headers: {\n                \"Authorization\": \"Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6OCwidXNlcm5hbWUiOiJQZXR5YTIiLCJlbWFpbCI6Im5hcGFkYXlsbzJAZ21haWwuY29tIiwiaWF0IjoxNjYxMzM2OTI3fQ.aThUXR0_aVoeAVQbnCEfN6T5s5eoDrEIBIfNxcidqzg\"\n\n            }}\n        )\n\n        if (login.status >= 400) {\n            return thunkApi.rejectWithValue({\n                message: 'Не удалось получить пользователя'\n            })\n        }\n        // console.log(login.data, 'login-data')\n        return login.data;\n    }\n)\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,GAAT,QAAoB,eAApB;AAYA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CACpC,WADoC,EAEpC;AACA,OAAOG,KAAP,EAAcC,QAAd,KAA2B;EACvB;EACA;EACA,MAAMC,KAAK,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAc,cAAd,EAChB;IACI,QAAQ;MACJ,SAAS,sBADL;MAEJ,YAAY;IAFR,CADZ,CAKI;IACA;IACA;;EAPJ,CADgB,EAUhB;IAAEC,OAAO,EAAE;MACP,iBAAiB;IADV;EAAX,CAVgB,CAApB;;EAgBA,IAAIF,KAAK,CAACG,MAAN,IAAgB,GAApB,EAAyB;IACrB,OAAOJ,QAAQ,CAACK,eAAT,CAAyB;MAC5BC,OAAO,EAAE;IADmB,CAAzB,CAAP;EAGH,CAvBsB,CAwBvB;;;EACA,OAAOL,KAAK,CAACM,IAAb;AACH,CA7BmC,CAAjC"},"metadata":{},"sourceType":"module"}